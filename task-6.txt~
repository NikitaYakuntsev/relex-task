Какие возможны дальнейшие работы над проектами:
-для каждого сенсора, подключенного к клумбе, нужно хранить флаг, определяющий тип предела (верхняя грань для температуры, нижняя для влажности, например) и с учетом этого менять метод bool Gardener::needToBeWatered(Flowerbed &f). Тогда логику не нужно будет явно задавать в коде в зависимости от типа измерения.
-задача 5: если вынести массивы расстояний из объектов Flowerbed в матрицу весов (времени между i-j) на уровне Gardener, то для нахождения кратчайшего пути от текущей позиции до клумбы для поливальной машины можно применить алгоритм Дейкстры.
-возможно, изменить решения заданий 1-3 и сделать по аналогии с 4 с состояниями поливальной машины, но для случая с одной поливальной машиной это не критично.
-исправление встретившихся багов в текущей версии не всегда вело к исправлению багов в предыдущей, но их там могло и не быть; поскольку новая версия отличается новой функциональностью, и, начиная с задачи 4, могли вноситься относительно значимые корректировки в алгоритм, то сравнение разных заданий представляется ресурсоемкой задачей.


Встретившиеся проблемы:
-задача 5: предположительно, случился неявный каст в беззнаковые типы (или в тип int, меньший по размеру, чем long) в методе bool Flowerbed::couldBeWatered(unsigned long currTime), прошлая версия метода есть в задаче 4, из-за чего выражение -540 <= 14000 становилось истиной.
-задача 5: вследствие изменения логики перемещений поливальной машины, появилась ситуация, при которой две машины ехали к нужной клумбе одновременно. Такой баг не проявлялся в версии 4 (на аналогичных тестах), поэтому пришлось на уровне садовника ставить отметки, что к данной клумбе машина уже направлена, и снимать их, когда машина завершает полив.
